<?php

/* Copyright (C) 2007-2017  Laurent Destailleur     <eldy@users.sourceforge.net>
 * Copyright (C) 2023       Alice Adminson          <aadminson@example.com>
 * Copyright (C) 2024       Frédéric France         <frederic.france@free.fr>
 * Copyright (C) 2024       Rafael San José         <rsanjose@alxarafe.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

namespace DoliModules\BookCal\Controller;

global $conf;
global $db;
global $user;
global $hookmanager;
global $user;
global $menumanager;
global $langs;
global $mysoc;

use DoliCore\Base\DolibarrController;
use DoliCore\Lib\ExtraFields;
use DoliCore\Lib\Fields;
use DoliModules\BookCal\Model\Calendar;

/**
 *      \file       htdocs/bookcal/calendar_list.php
 *      \ingroup    bookcal
 *      \brief      List page for calendar
 */

// Load Dolibarr environment
require BASE_PATH . '/main.inc.php';
require_once BASE_PATH . '/../Dolibarr/Lib/Date.php';
require_once BASE_PATH . '/../Dolibarr/Lib/Company.php';

class BookCalCalendarListController extends DolibarrController
{
    public function index(bool $executeActions = true): bool
    {
        global $conf;
        global $db;
        global $user;
        global $hookmanager;
        global $user;
        global $menumanager;
        global $langs;

// Load translation files required by the page
        $langs->loadLangs(["agenda", "other"]);

        $action = GETPOST('action', 'aZ09') ? GETPOST('action', 'aZ09') : 'view'; // The action 'create'/'add', 'edit'/'update', 'view', ...
        $massaction = GETPOST('massaction', 'alpha'); // The bulk action (combo box choice into lists)
        $show_files = GETPOSTINT('show_files'); // Show files area generated by bulk actions ?
        $confirm = GETPOST('confirm', 'alpha'); // Result of a confirmation
        $cancel = GETPOST('cancel', 'alpha'); // We click on a Cancel button
        $toselect = GETPOST('toselect', 'array'); // Array of ids of elements selected into a list
        $contextpage = GETPOST('contextpage', 'aZ') ? GETPOST('contextpage', 'aZ') : str_replace('_', '', basename(dirname(__FILE__)) . basename(__FILE__, '.php')); // To manage different context of search
        $backtopage = GETPOST('backtopage', 'alpha'); // Go back to a dedicated page
        $optioncss = GETPOST('optioncss', 'aZ'); // Option for the css output (always '' except when 'print')
        $mode = GETPOST('mode', 'aZ'); // The output mode ('list', 'kanban', 'hierarchy', 'calendar', ...)

        $id = GETPOSTINT('id');
        $ref = GETPOST('ref', 'alpha');

// Load variable for pagination
        $limit = GETPOSTINT('limit') ? GETPOSTINT('limit') : $conf->liste_limit;
        $sortfield = GETPOST('sortfield', 'aZ09comma');
        $sortorder = GETPOST('sortorder', 'aZ09comma');
        $page = GETPOSTISSET('pageplusone') ? (GETPOSTINT('pageplusone') - 1) : GETPOSTINT("page");
        if (empty($page) || $page < 0 || GETPOST('button_search', 'alpha') || GETPOST('button_removefilter', 'alpha')) {
            // If $page is not defined, or '' or -1 or if we click on clear filters
            $page = 0;
        }
        $offset = $limit * $page;
        $pageprev = $page - 1;
        $pagenext = $page + 1;

// Initialize technical objects
        $object = new Calendar($db);
        $extrafields = new ExtraFields($db);
        $diroutputmassaction = $conf->bookcal->dir_output . '/temp/massgeneration/' . $user->id;
        $hookmanager->initHooks([$contextpage]);   // Note that conf->hooks_modules contains array of activated contexes

// Fetch optionals attributes and labels
        $extrafields->fetch_name_optionals_label($object->table_element);
//$extrafields->fetch_name_optionals_label($object->table_element_line);

        $search_array_options = $extrafields->getOptionalsFromPost($object->table_element, '', 'search_');

// Default sort order (if not yet defined by previous GETPOST)
        if (!$sortfield) {
            reset($object->fields);                 // Reset is required to avoid key() to return null.
            $sortfield = "t." . key($object->fields); // Set here default search field. By default 1st field in definition.
        }
        if (!$sortorder) {
            $sortorder = "ASC";
        }

// Initialize array of search criteria
        $search_all = GETPOST('search_all', 'alphanohtml');
        $search = [];
        foreach ($object->fields as $key => $val) {
            if (GETPOST('search_' . $key, 'alpha') !== '') {
                $search[$key] = GETPOST('search_' . $key, 'alpha');
            }
            if (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
                $search[$key . '_dtstart'] = dol_mktime(0, 0, 0, GETPOSTINT('search_' . $key . '_dtstartmonth'), GETPOSTINT('search_' . $key . '_dtstartday'), GETPOSTINT('search_' . $key . '_dtstartyear'));
                $search[$key . '_dtend'] = dol_mktime(23, 59, 59, GETPOSTINT('search_' . $key . '_dtendmonth'), GETPOSTINT('search_' . $key . '_dtendday'), GETPOSTINT('search_' . $key . '_dtendyear'));
            }
        }

// List of fields to search into when doing a "search in all"
// $fieldstosearchall = array();
// foreach ($object->fields as $key => $val) {
//  if (!empty($val['searchall'])) {
//      $fieldstosearchall['t.'.$key] = $val['label'];
//  }
// }
// $parameters = array('fieldstosearchall'=>$fieldstosearchall);
// $reshook = $hookmanager->executeHooks('completeFieldsToSearchAll', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks
// if ($reshook > 0) {
//  $fieldstosearchall = empty($hookmanager->resArray['fieldstosearchall']) ? array() : $hookmanager->resArray['fieldstosearchall'];
// } elseif ($reshook == 0) {
//  $fieldstosearchall = array_merge($fieldstosearchall, empty($hookmanager->resArray['fieldstosearchall']) ? array() : $hookmanager->resArray['fieldstosearchall']);
// }

// $fieldstosearchall is supposedly defined further below, ensure that it is.
        if (!isset($fieldstosearchall) || !is_array($fieldstosearchall)) {
            $fieldstosearchall = [];
        }
        '
 @phan-var-force array<string,string> $fieldstosearchall
';

// Definition of array of fields for columns
        $arrayfields = Fields::getArrayFields($object->fields);

// Extra fields
        include DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_array_fields.tpl.php';

        $object->fields = dol_sort_array($object->fields, 'position');
//$arrayfields['anotherfield'] = array('type'=>'integer', 'label'=>'AnotherField', 'checked'=>1, 'enabled'=>1, 'position'=>90, 'csslist'=>'right');
        $arrayfields = dol_sort_array($arrayfields, 'position');

// There is several ways to check permission.
// Set $enablepermissioncheck to 1 to enable a minimum low level of checks
        $enablepermissioncheck = 0;
        if ($enablepermissioncheck) {
            $permissiontoread = $user->hasRight('bookcal', 'calendar', 'read');
            $permissiontoadd = $user->hasRight('bookcal', 'calendar', 'write');
            $permissiontodelete = $user->hasRight('bookcal', 'calendar', 'delete');
        } else {
            $permissiontoread = 1;
            $permissiontoadd = 1;
            $permissiontodelete = 1;
        }

// Security check (enable the most restrictive one)
        if ($user->socid > 0) {
            accessforbidden();
        }
//if ($user->socid > 0) accessforbidden();
//$socid = 0; if ($user->socid > 0) $socid = $user->socid;
//$isdraft = (($object->status == $object::STATUS_DRAFT) ? 1 : 0);
//restrictedArea($user, $object->module, 0, $object->table_element, $object->element, 'fk_soc', 'rowid', $isdraft);
        if (!isModEnabled("bookcal")) {
            accessforbidden('Module bookcal not enabled');
        }
        if (!$permissiontoread) {
            accessforbidden();
        }


        /*
         * Actions
         */

        if (GETPOST('cancel', 'alpha')) {
            $action = 'list';
            $massaction = '';
        }
        if (!GETPOST('confirmmassaction', 'alpha') && $massaction != 'presend' && $massaction != 'confirm_presend') {
            $massaction = '';
        }

        $parameters = [];
        $reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks
        if ($reshook < 0) {
            setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');
        }

        if (empty($reshook)) {
            // Selection of new fields
            include DOL_DOCUMENT_ROOT . '/core/actions_changeselectedfields.inc.php';

            // Purge search criteria
            if (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')) { // All tests are required to be compatible with all browsers
                foreach ($object->fields as $key => $val) {
                    $search[$key] = '';
                    if (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
                        $search[$key . '_dtstart'] = '';
                        $search[$key . '_dtend'] = '';
                    }
                }
                $toselect = [];
                $search_array_options = [];
            }
            if (
                GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')
                || GETPOST('button_search_x', 'alpha') || GETPOST('button_search.x', 'alpha') || GETPOST('button_search', 'alpha')
            ) {
                $massaction = ''; // Protection to avoid mass action if we force a new search during a mass action confirmation
            }

            // Mass actions
            $objectclass = 'Calendar';
            $objectlabel = 'Calendar';
            $uploaddir = $conf->bookcal->dir_output;
            include DOL_DOCUMENT_ROOT . '/core/actions_massactions.inc.php';

            // You can add more action here
            // if ($action == 'xxx' && $permissiontoxxx) ...
        }


        /*
         * View
         */
        require_once realpath(BASE_PATH . '/../Dolibarr/Modules/BookCal/Views/calendar_list.php');

        $db->close();

        return true;
    }
}
