<?php

/* Copyright (C) 2007-2017  Laurent Destailleur     <eldy@users.sourceforge.net>
 * Copyright (C) 2024		MDW						<mdeweerd@users.noreply.github.com>
 * Copyright (C) 2024       Rafael San Jos√©         <rsanjose@alxarafe.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

namespace DoliModules\Bom\Controller;

global $conf;
global $db;
global $user;
global $hookmanager;
global $user;
global $menumanager;
global $langs;
global $mysoc;

/**
 *    \file       htdocs/bom/bom_list.php
 *    \ingroup    bom
 *    \brief      List page for BillOfMaterials
 */

use DoliCore\Base\DolibarrController;
use DoliCore\Form\Form;
use DoliCore\Lib\ExtraFields;
use DoliCore\Lib\Fields;
use DoliModules\Bom\Model\Bom;

// Load Dolibarr environment
require BASE_PATH . '/main.inc.php';
require_once BASE_PATH . '/../Dolibarr/Lib/Date.php';
require_once BASE_PATH . '/../Dolibarr/Lib/Company.php';
require_once BASE_PATH . '/../Dolibarr/Modules/Bom/Lib/Bom.php';

class BomListController extends DolibarrController
{
    public function index(bool $executeActions = true): bool
    {
        global $conf;
        global $db;
        global $user;
        global $hookmanager;
        global $user;
        global $menumanager;
        global $langs;
        global $mysoc;

        // Load translation files required by the page
        $langs->loadLangs(['mrp', 'other']);

// Get Parameters
        $id = GETPOSTINT('id');
        $action = GETPOST('action', 'aZ09') ? GETPOST('action', 'aZ09') : 'view'; // The action 'add', 'create', 'edit', 'update', 'view', ...
        $massaction = GETPOST('massaction', 'alpha'); // The bulk action (combo box choice into lists)
        $show_files = GETPOSTINT('show_files'); // Show files area generated by bulk actions ?
        $confirm = GETPOST('confirm', 'alpha'); // Result of a confirmation
        $cancel = GETPOST('cancel', 'alpha'); // We click on a Cancel button
        $toselect = GETPOST('toselect', 'array'); // Array of ids of elements selected into a list
        $contextpage = GETPOST('contextpage', 'aZ') ? GETPOST('contextpage', 'aZ') : 'bomlist'; // To manage different context of search
        $backtopage = GETPOST('backtopage', 'alpha'); // Go back to a dedicated page
        $optioncss = GETPOST('optioncss', 'aZ'); // Option for the css output (always '' except when 'print')
        $mode = GETPOST('mode', 'aZ');  // mode view (kanban or common)


// Load variable for pagination
        $limit = GETPOSTINT('limit') ? GETPOSTINT('limit') : $conf->liste_limit;
        $sortfield = GETPOST('sortfield', 'aZ09comma');
        $sortorder = GETPOST('sortorder', 'aZ09comma');
        $page = GETPOSTISSET('pageplusone') ? (GETPOSTINT('pageplusone') - 1) : GETPOSTINT('page');
        if (empty($page) || $page < 0 || GETPOST('button_search', 'alpha') || GETPOST('button_removefilter', 'alpha')) {
            // If $page is not defined, or '' or -1 or if we click on clear filters
            $page = 0;
        }
        $offset = $limit * $page;
        $pageprev = $page - 1;
        $pagenext = $page + 1;
//if (! $sortfield) $sortfield="p.date_fin";
//if (! $sortorder) $sortorder="DESC";

// Initialize technical objects
        $object = new Bom($db);
        $extrafields = new ExtraFields($db);
        $diroutputmassaction = $conf->bom->dir_output . '/temp/massgeneration/' . $user->id;
        $hookmanager->initHooks(['bomlist']); // Note that conf->hooks_modules contains array

// Fetch optionals attributes and labels
        $extrafields->fetch_name_optionals_label($object->table_element);

        $search_array_options = $extrafields->getOptionalsFromPost($object->table_element, '', 'search_');

// Default sort order (if not yet defined by previous GETPOST)
        if (!$sortfield) {
            reset($object->fields);                 // Reset is required to avoid key() to return null.
            $sortfield = "t." . key($object->fields); // Set here default search field. By default 1st field in definition.
        }
        if (!$sortorder) {
            $sortorder = "ASC";
        }

// Initialize array of search criteria
        $search_all = trim(GETPOST('search_all', 'alphanohtml'));
        $search = [];
        foreach ($object->fields as $key => $val) {
            if (GETPOST('search_' . $key, 'alpha') !== '') {
                $search[$key] = GETPOST('search_' . $key, 'alpha');
            }
            if (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
                $search[$key . '_dtstart'] = dol_mktime(0, 0, 0, GETPOSTINT('search_' . $key . '_dtstartmonth'), GETPOSTINT('search_' . $key . '_dtstartday'), GETPOSTINT('search_' . $key . '_dtstartyear'));
                $search[$key . '_dtend'] = dol_mktime(23, 59, 59, GETPOSTINT('search_' . $key . '_dtendmonth'), GETPOSTINT('search_' . $key . '_dtendday'), GETPOSTINT('search_' . $key . '_dtendyear'));
            }
        }

        $fieldstosearchall = [];
// List of fields to search into when doing a "search in all"
        foreach ($object->fields as $key => $val) {
            if (!empty($val['searchall'])) {
                $fieldstosearchall['t.' . $key] = $val['label'];
            }
        }

// Definition of array of fields for columns
        $arrayfields = Fields::getArrayFields($object->fields);

// Extra fields
        include DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_array_fields.tpl.php';

        $object->fields = dol_sort_array($object->fields, 'position');
        $arrayfields = dol_sort_array($arrayfields, 'position');

        $permissiontoread = $user->hasRight('bom', 'read');
        $permissiontoadd = $user->hasRight('bom', 'write');
        $permissiontodelete = $user->hasRight('bom', 'delete');

// Security check
        if ($user->socid > 0) {
            // Protection if external user
            accessforbidden();
        }
        $result = restrictedArea($user, 'bom');


        /*
         * Actions
         */

        if (GETPOST('cancel', 'alpha')) {
            $action = 'list';
            $massaction = '';
        }
        if (!GETPOST('confirmmassaction', 'alpha') && $massaction != 'presend' && $massaction != 'confirm_presend') {
            $massaction = '';
        }

        $parameters = [];
        $reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks
        if ($reshook < 0) {
            setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');
        }

        if (empty($reshook)) {
            // Selection of new fields
            include DOL_DOCUMENT_ROOT . '/core/actions_changeselectedfields.inc.php';

            // Purge search criteria
            if (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')) { // All tests are required to be compatible with all browsers
                foreach ($object->fields as $key => $val) {
                    $search[$key] = '';
                    if (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
                        $search[$key . '_dtstart'] = '';
                        $search[$key . '_dtend'] = '';
                    }
                }
                $toselect = [];
                $search_array_options = [];
            }
            if (
                GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')
                || GETPOST('button_search_x', 'alpha') || GETPOST('button_search.x', 'alpha') || GETPOST('button_search', 'alpha')
            ) {
                $massaction = ''; // Protection to avoid mass action if we force a new search during a mass action confirmation
            }

            // Mass actions
            $objectclass = 'BOM';
            $objectlabel = 'BillOfMaterials';
            $permissiontoread = $user->hasRight('bom', 'read');
            $permissiontodelete = $user->hasRight('bom', 'delete');
            $uploaddir = $conf->bom->dir_output;
            include DOL_DOCUMENT_ROOT . '/core/actions_massactions.inc.php';


            // Validate records
            if (!$error && $massaction == 'disable' && $permissiontoadd) {
                $objecttmp = new $objectclass($db);

                if (!$error) {
                    $db->begin();

                    $nbok = 0;
                    foreach ($toselect as $toselectid) {
                        $result = $objecttmp->fetch($toselectid);
                        if ($result > 0) {
                            if ($objecttmp->status != $objecttmp::STATUS_VALIDATED) {
                                $langs->load("errors");
                                setEventMessages($langs->trans("ErrorObjectMustHaveStatusActiveToBeDisabled", $objecttmp->ref), null, 'errors');
                                $error++;
                                break;
                            }

                            // Can be 'cancel()' or 'close()'
                            $result = $objecttmp->cancel($user);
                            if ($result < 0) {
                                setEventMessages($objecttmp->error, $objecttmp->errors, 'errors');
                                $error++;
                                break;
                            } else {
                                $nbok++;
                            }
                        } else {
                            setEventMessages($objecttmp->error, $objecttmp->errors, 'errors');
                            $error++;
                            break;
                        }
                    }

                    if (!$error) {
                        setEventMessages($langs->trans("RecordsModified", $nbok), null, 'mesgs');
                        $db->commit();
                    } else {
                        $db->rollback();
                    }
                    //var_dump($listofobjectthirdparties);exit;
                }
            }

            // Validate records
            if (!$error && $massaction == 'enable' && $permissiontoadd) {
                $objecttmp = new $objectclass($db);

                if (!$error) {
                    $db->begin();

                    $nbok = 0;
                    foreach ($toselect as $toselectid) {
                        $result = $objecttmp->fetch($toselectid);
                        if ($result > 0) {
                            if ($objecttmp->status != $objecttmp::STATUS_DRAFT && $objecttmp->status != $objecttmp::STATUS_CANCELED) {
                                $langs->load("errors");
                                setEventMessages($langs->trans("ErrorObjectMustHaveStatusDraftOrDisabledToBeActivated", $objecttmp->ref), null, 'errors');
                                $error++;
                                break;
                            }

                            // Can be 'cancel()' or 'close()'
                            $result = $objecttmp->validate($user);
                            if ($result < 0) {
                                setEventMessages($objecttmp->error, $objecttmp->errors, 'errors');
                                $error++;
                                break;
                            } else {
                                $nbok++;
                            }
                        } else {
                            setEventMessages($objecttmp->error, $objecttmp->errors, 'errors');
                            $error++;
                            break;
                        }
                    }

                    if (!$error) {
                        setEventMessages($langs->trans("RecordsModified", $nbok), null, 'mesgs');
                        $db->commit();
                    } else {
                        $db->rollback();
                    }
                    //var_dump($listofobjectthirdparties);exit;
                }
            }
        }


        /*
         * View
         */
        require_once realpath(BASE_PATH . '/../Dolibarr/Modules/Bom/Views/bom_list.php');

        $db->close();

        return true;
    }
}
